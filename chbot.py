import discord
from discord.ext import commands, tasks
from discord.ui import Button, View
import yt_dlp
from collections import deque
import asyncio
import logging
import time

logging.basicConfig(level=logging.DEBUG)

intents = discord.Intents.default()
intents.messages = True
intents.message_content = True
intents.guilds = True
intents.voice_states = True

bot = commands.Bot(command_prefix="!", intents=intents)

song_queue = deque()
current_song = None  # –¢–µ–∫—É—â–∏–π —Ç—Ä–µ–∫
player_message = None  # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –ø–ª–µ–µ—Ä–∞

YDL_OPTIONS = {
    'format': 'bestaudio/best',
    'quiet': True,
    'no_warnings': True,
    'default_search': 'auto',
    'source_address': '0.0.0.0',
    'force-ipv4': True,
    'postprocessors': [{
        'key': 'FFmpegExtractAudio',
        'preferredcodec': 'opus',
        'preferredquality': '192',
    }],
    'cookiefile': 'cookies.txt'
}

""" class MusicPlayer(View):
    def __init__(self, ctx):
        super().__init__(timeout=None)
        self.ctx = ctx

    @discord.ui.button(emoji="‚èÆ", style=discord.ButtonStyle.grey)
    async def prev_button(self, interaction: discord.Interaction, button: Button):
        await interaction.response.defer()

    @discord.ui.button(emoji="‚èØ", style=discord.ButtonStyle.green)
    async def play_pause_button(self, interaction: discord.Interaction, button: Button):
        voice_client = self.ctx.voice_client
        if voice_client.is_playing():
            voice_client.pause()
            button.emoji = "‚ñ∂Ô∏è"
        else:
            voice_client.resume()
            button.emoji = "‚è∏Ô∏è"
        await interaction.response.defer()

    @discord.ui.button(emoji="‚è≠", style=discord.ButtonStyle.grey)
    async def next_button(self, interaction: discord.Interaction, button: Button):
        global current_song
        if self.ctx.voice_client:
            self.ctx.voice_client.stop()
            current_song = None
        await interaction.response.defer()

    @discord.ui.button(emoji="‚èπ", style=discord.ButtonStyle.red)
    async def stop_button(self, interaction: discord.Interaction, button: Button):
        global current_song
        if self.ctx.voice_client:
            self.ctx.voice_client.stop()
            song_queue.clear()
            current_song = None
        await interaction.response.defer() """

@bot.event
async def on_ready():
    print(f"–ë–æ—Ç {bot.user.name} –≥–æ—Ç–æ–≤!")

@bot.command(name="join")
async def join(ctx):
    if not ctx.author.voice:
        await ctx.send("–¢–∏ –Ω–µ –≤ –∫–∞–Ω–∞–ª—ñ!")
        return

    channel = ctx.author.voice.channel
    if ctx.voice_client is None:
        await channel.connect()
        await ctx.send(f"–ü—ñ–¥—Ä—É–±–∏–≤—Å—è –¥–æ –ø–æ—Ç—É–∂–Ω–∏—Ö —Ö–ª–æ–ø—Ü—ñ–≤ –∑ {channel.name}.")
    else:
        await ctx.voice_client.move_to(channel)

@bot.command(name="play")
async def play(ctx, url):
    global player_message
    voice_client = ctx.voice_client

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É
    if not voice_client or not voice_client.is_connected():
        await ctx.send("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É —á–µ—Ä–µ–∑ `!join`.")
        return

    try:
        with yt_dlp.YoutubeDL(YDL_OPTIONS) as ydl:
            info = ydl.extract_info(url, download=False)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–∞
            if "entries" in info:
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ç—Ä–µ–∫–∏ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥—å
                entries = info["entries"]
                added_songs = 0
                for entry in entries:
                    if entry:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ None-—ç–ª–µ–º–µ–Ω—Ç—ã
                        song_queue.append((entry["url"], entry["title"]))
                        added_songs += 1
                await ctx.send(f"üé∂ –í –æ—á–µ—Ä–µ–¥—å –¥–æ–±–∞–≤–ª–µ–Ω–æ **{added_songs} —Ç—Ä–µ–∫–æ–≤** –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞.")
            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –≤–∏–¥–µ–æ
                song_queue.append((info["url"], info.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")))
                await ctx.send(f"üéµ –¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å: **{info['title']}**")

            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
            if not voice_client.is_playing() and not current_song:
                await play_next_song(ctx)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–ª–µ–µ—Ä–∞
            """ if not player_message:
                player = MusicPlayer(ctx)
                player_message = await ctx.send(view=player, embed=discord.Embed(description=" "))
            await update_player_interface(ctx) """

    except Exception as e:
        await ctx.send(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def play_next_song(ctx):
    global current_song

    if not song_queue:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –±–æ—Ç –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É
    if ctx.voice_client is None or not ctx.voice_client.is_connected():
        if ctx.author.voice:
            await ctx.author.voice.channel.connect()
        else:
            await ctx.send("–¢—ã –Ω–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ, –∏ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è!")
            return

    current_song = song_queue.popleft()
    url2, title = current_song

    def after_playing(e):
        global current_song
        current_song = None
        if e:
            print(f"–û—à–∏–±–∫–∞: {e}")
        asyncio.run_coroutine_threadsafe(play_next_song(ctx), bot.loop)

    ffmpeg_options = {
        'before_options': '-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5',
        'options': '-vn'
    }

    try:
        ctx.voice_client.play(
            discord.FFmpegPCMAudio(executable="ffmpeg", source=url2, **ffmpeg_options),
            after=after_playing
        )
        await ctx.send(f"üé∂ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: {title}")
    except Exception as e:
        await ctx.send(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {str(e)}")
        current_song = None
        await play_next_song(ctx)


async def update_player_interface(ctx):
    global player_message, current_song

    if not player_message:
        return

    embed = discord.Embed(title="–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –ø–ª–µ–µ—Ä", color=discord.Color.blue(), description=" ")
    if current_song:
        embed.add_field(name="–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç", value=current_song[1], inline=False, description=" ")
    else:
        embed.add_field(name="–°—Ç–∞—Ç—É—Å", value="–ù–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç", inline=False, description=" ")

    if song_queue:
        queue_list = "\n".join([f"**{i+1}.** {song[1]}" for i, song in enumerate(song_queue)])
        embed.add_field(name="–û—á–µ—Ä–µ–¥—å", value=queue_list, inline=False, description=" ")

    await player_message.edit(embed=embed)

@tasks.loop(minutes=5)
async def check_voice_activity():
    for guild in bot.guilds:
        if guild.voice_client and not guild.voice_client.is_playing():
            await guild.voice_client.disconnect()
            print(f"–ë–æ—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç {guild.name} –∏–∑-–∑–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è.")

@bot.command(name="skip")
async def skip(ctx):
    voice_client = ctx.voice_client
    if voice_client and voice_client.is_playing():
        voice_client.stop()
        await ctx.send("–ü–µ—Å–Ω—è –ø—Ä–æ–ø—É—â–µ–Ω–∞!")
    else:
        await ctx.send("–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç.")

@bot.command(name="stop")
async def stop(ctx):
    voice_client = ctx.voice_client
    if voice_client:
        voice_client.stop()
        song_queue.clear()
        await ctx.send("–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏ –æ—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞.")
    else:
        await ctx.send("–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç.")

@bot.command(name="leave")
async def leave(ctx):
    voice_client = ctx.voice_client
    if voice_client:
        await voice_client.disconnect()
        await ctx.send("–ë–æ—Ç –ø–æ–∫–∏–Ω—É–ª –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª.")
    else:
        await ctx.send("–ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É.")

#@bot.event
#async def on_command_error(ctx, error):
   # await ctx.send(f"–û—à–∏–±–∫–∞: {str(error)}")
    


TOKEN = "MTMxMjQ1NDYwODk2NjEyNzYxNg.GLmq0v.ODlTZOWBi2__cA3ebwvumJRtYEv31d-nWQt4hU"
bot.run(TOKEN)
@bot.event
async def on_command_error(ctx, error):
    await ctx.send(f"–û—à–∏–±–∫–∞: {str(error)}")
    print(f"–û—à–∏–±–∫–∞: {str(error)}")